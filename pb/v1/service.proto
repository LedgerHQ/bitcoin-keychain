syntax = "proto3";

package pb.v1;
option go_package = ".;pb";
option java_package = "co.ledger.protobuf";

import "google/protobuf/empty.proto";

service KeychainService {
  // Create a new keychain by descriptor.
  rpc CreateKeychain(CreateKeychainRequest) returns (KeychainInfo) {}

  // Delete a keychain by descriptor.
  rpc DeleteKeychain(DeleteKeychainRequest) returns (google.protobuf.Empty) {}

  // Get keychain metadata.
  rpc GetKeychainInfo(GetKeychainInfoRequest) returns (KeychainInfo) {}
}

// BitcoinNetwork enumerates the list of all supported Bitcoin networks. It
// also indicates the coin for which the networks are defined, in this case,
// Bitcoin.
//
// This enum type may be used by gRPC clients to differentiate protocol
// behaviour, magic numbers, addresses, keys, etc., for one network from those
// intended for use on another network.
enum BitcoinNetwork {
  BITCOIN_NETWORK_UNSPECIFIED = 0;  // Fallback value if unrecognized / unspecified
  BITCOIN_NETWORK_MAINNET     = 1;  // Main network
  BITCOIN_NETWORK_TESTNET3    = 2;  // Current test network (since Bitcoin Core v0.7)
  BITCOIN_NETWORK_REGTEST     = 3;  // Regression test network
}

message CreateKeychainRequest {
  string account_descriptor = 1;
  uint32 lookahead_size = 2;
  BitcoinNetwork network = 3;
}

message DeleteKeychainRequest {
  string account_descriptor = 1;
}

message GetKeychainInfoRequest {
  string account_descriptor = 1;
}

message KeychainInfo {
  // Account descriptor of the keychain, at HD depth 3. MUST include the key
  // origin information.
  // Ref: https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md
  string account_descriptor = 1;

  // Extended public key serialized with standard HD version bytes.
  string xpub = 2;

  // Extended public key serialized with SLIP-0132 HD version bytes.
  // Ref: https://github.com/satoshilabs/slips/blob/master/slip-0132.md
  string slip32_extended_public_key = 3;

  // External chain extended public key at HD tree depth 4.
  string external_xpub = 4;

  // Number of external chain addresses in keychain.
  uint32 max_external_index = 6;

  // Internal chain extended public key at HD tree depth 4.
  string internal_xpub = 7;

  // Number of internal chain addresses in keychain.
  uint32 max_internal_index = 9;

  // Numerical size of the lookahead zone.
  uint32 lookahead_size = 10;

  // Scheme defines the scheme on which a keychain entry is based.
  enum Scheme {
    SCHEME_UNSPECIFIED = 0;  // fallback value if unrecognized / unspecified
    SCHEME_BIP44       = 1;  // indicates that the keychain scheme is legacy.
    SCHEME_BIP49       = 2;  // indicates that the keychain scheme is segwit.
    SCHEME_BIP84       = 3;  // indicates that the keychain scheme is native segwit.
  }
  Scheme scheme = 11;

  // Network for which the keychain is defined.
  //
  // Although the network information can be inferred from the account
  // descriptor, it is often not enough to differentiate between Testnet3
  // and Regtest networks, typically the case with the BIP84 scheme.
  //
  // This field is mostly useful for encoding addresses for a specific
  // network.
  BitcoinNetwork network = 12;
}
